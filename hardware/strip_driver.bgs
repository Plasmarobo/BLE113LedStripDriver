const MAX_METERS = 15 #5m per strip
const MAX_LEDS = 480 #160 leds per m
const MAX_DATA_LEN = 1440

dim meters 
dim led_count
dim i
dim j
dim write_ptr
dim read_ptr

#Create a 4 part buffer
dim stripA(256)
dim stripB(256)
dim stripC(256)
dim stripD(256)
dim stripE(256)
dim stripF(256)

dim result

dim in(20) # endpoint data in
dim in_len

dim out(20) # endpoint data out
dim out_len

dim custom_adv_data(9)

dim connected

procedure print(str())
	j = 0
	while((str(j:1) != "\x00") && (j < 256))
		call system_endpoint_tx(system_endpoint_uart1, 1, str(j:1))
		j = j + 1
	end while
end

# flexible procedure to display %02X byte arrays
dim hex_buf(3) # [0,1] = ASCII hex representation, [2]=separator
dim hex_index # byte array index
procedure print_hex_bytes(endpoint, separator, reverse, b_length, b_data())
	hex_buf(2:1) = separator
	hex_index = 0
	while hex_index < b_length
		if reverse = 0 then
			hex_buf(0:1) = (b_data(hex_index:1)/$10) + 48 + ((b_data(hex_index:1)/$10)/10*7)
			hex_buf(1:1) = (b_data(hex_index:1)&$f) + 48 + ((b_data(hex_index:1)&$f )/10*7)
		else
			hex_buf(0:1) = (b_data(b_length - hex_index - 1:1)/$10) + 48 + ((b_data(b_length - hex_index - 1:1)/$10)/10*7)
			hex_buf(1:1) = (b_data(b_length - hex_index - 1:1)&$f) + 48 + ((b_data(b_length - hex_index - 1:1)&$f )/10*7)
		end if
		if separator > 0 && hex_index < b_length - 1 then
			call system_endpoint_tx(endpoint, 3, hex_buf(0:3))
		else
			call system_endpoint_tx(endpoint, 2, hex_buf(0:2))
		end if
		hex_index = hex_index + 1
	end while
end

procedure printh(len, data())
	call print("0x\x00")
	call print_hex_bytes(system_endpoint_uart1, 0, 0, len, data(0:len))
end

procedure write_pixels()
	read_ptr = 0
	call print("Pixel Payload: \x00")
	call printh(1,write_ptr)
	call print("\n\r\x00")
	while(read_ptr < write_ptr)
		call printh(1, read_ptr)
		call print("/\x00")
		call printh(1,write_ptr)
		call print("\n\r\x00")
		if (read_ptr < 256)
			call hardware_spi_transfer(0, 1, stripA(read_ptr:1))
		else
			if (read_ptr < 512)
				call hardware_spi_transfer(0, 1, stripB((read_ptr-256):1))
			else 
				if (read_ptr < 768)
					call hardware_spi_transfer(0, 1, stripC((read_ptr-512):1))
				else 
					if (read_ptr < 1024)
						call hardware_spi_transfer(0, 1, stripD((read_ptr-768):1))
					else 
						if (read_ptr < 1280)
							call hardware_spi_transfer(0, 1, stripE((read_ptr-1024):1))
						else 
							if (read_ptr < 1536)
								call hardware_spi_transfer(0, 1, stripF((read_ptr-1280):1))
							end if
						end if
					end if
				end if
			end if
		end if
		read_ptr = read_ptr + 1
	end while
end

procedure write_reset()
	#Hard maximum 15 meters
	write_ptr = 0
	call print("==Write Pointer Reset==\n\r\x00")
	call hardware_spi_transfer(0, meters, "\x00\x00\x00\x00\x00")
end

procedure blank_strip()
	i = 0
	while(i < led_count)
		call hardware_spi_transfer(0,3,"\x80\x80\x80")
		i = i + 1
	end while
	call write_reset()
end


procedure set_strip_info(num_leds)
	led_count = num_leds
	meters = (led_count+31)/32
end

procedure set_color(v)
	if (write_ptr < 256)
		stripA(write_ptr:1) = v
	else
		if (write_ptr < 512)
			stripB((write_ptr-256):1) = v
		else 
			if (write_ptr < 768)
				stripC((write_ptr-512):1) = v
			else 
				if (write_ptr < 1024)
					stripD((write_ptr-768):1) = v
				else 
					if (write_ptr < 1280)
						stripE((write_ptr-1024):1) = v
					else 
						if (write_ptr < 1536)
							stripF((write_ptr-1280):1) = v
						end if
					end if
				end if
			end if
		end if
	end if
	write_ptr = write_ptr + 1
	if (write_ptr >= (led_count*3))
		call write_pixels()
		call write_reset()
	end if
end

#Values should have the high bit set
procedure set_rgb(r, g, b)
	#Little endian, grb -> brg
	call set_color(b | $80)
	call set_color(r | $80)
	call set_color(g | $80)
end

#Listen for boot
event system_boot(major, minor, patch, build,ll_version, protocol,hw)
	connected = 0
	write_ptr = 0
	read_ptr = 0
	call set_strip_info(160)

	call hardware_io_port_config_direction(1,1) #P1.0 is output
	call hardware_io_port_config_direction(1,3) #P1.1 is output
	call hardware_io_port_write(1,3,3)
	call print("\n\r==Boot: LED Strip system boot==\n\r\x00")

	call gap_set_adv_parameters(320, 480, 7)
	
    call system_endpoint_set_watermarks(system_endpoint_uart1, 0, 0) # disable watermarks

    # put module into discoverable/connectable mode
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

	call blank_strip()
	call set_rgb(255,0,0)
	call set_rgb(0,255,0)
	call set_rgb(0,0,255)
	call write_pixels()
	call hardware_io_port_write(1,3,0)
end

#Listen for bluetooth
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	if connected = 0 then
        # Set up a connection interval of between 6*1.25ms to 10*1.25ms (7.5-12.5ms)
        # Android (and iOS?) respond to connection interval updates, but cannot set them
        call connection_update(connection, 6, 10, latency, timeout)
    end if
	call print("==Connected==\n\r\x00")
	call hardware_io_port_write(1,2,2)
    connected = 1
end

event attributes_status(handle, flags)

    if (handle = xgatt_debug) && (flags = 2) then
    
       call print("xgatt data rec\n\r\x00")

       call system_endpoint_set_watermarks(system_endpoint_uart1, 1, 0) # set RX watermark
       
    end if

end

event system_endpoint_watermark_rx(endpoint, size)

    in_len = size
    if in_len > 20 then
       in_len = 20
    end if
    call system_endpoint_set_watermarks(system_endpoint_uart1, 0, $ff) # disable RX watermark
    call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len))
    call attributes_write(xgatt_debug, 0, in_len, in(0:in_len))
    
end

event attclient_indicated(connection, handle)

    if handle = xgatt_debug then
        call system_endpoint_set_watermarks(system_endpoint_uart1, 1, $ff) # set RX watermark
    end if
    
end

event attributes_value(connection, reason, handle, offset, vlen, value_data)
	call hardware_io_port_write(1,1,1)

	if handle = c_led_data then
		i = 0
		call print("LED Data recieved\n\r\x00")
		call printh(vlen, value_data(i:vlen))
		call print("\n\r\x00")
		
		while( i < vlen)
			call set_rgb(value_data(i:1), value_data((i+1):1), value_data((i+2):1))
			call printh(1, i)
			call print(" Color: \x00")
			call printh(3, value_data(i:3))
			call print("\n\r\x00")
			i = i + 3
		end while
	end if 
	
	if handle = xgatt_debug then
        out(0:vlen) = value_data(0:vlen)
        out_len = vlen
        call system_endpoint_set_watermarks(system_endpoint_uart1, $ff, out_len) # set TX watermark
    end if
	
	if handle = c_led_cmd then
		#CMD API
		#0 : Call write
		#1 + (u16) : set LED count
		call print("n\rRecieved Command: \x00")
		if (value_data(0:1) = 0)
			call print("Write Strip\n\r\x00")
			call write_pixels()
			call write_reset()
		else 
			if (value_data(0:1) = 1)
				call set_strip_info(value_data(1:2))
				call print("Set Strip info\n\r\x00")
			else
				if (value_data(0:1) = 2)
					call print("Blank Strip\n\r\x00")
					call write_reset()
					call blank_strip()
					
				else
					if (value_data(0:1) = 3)
						call print("System Reset\n\r\x00")
						call system_reset(0)
					end if
				end if
			end if
		end if
	end if
	call print("==Data==\n\r\x00")
	call printh(vlen, value_data(0:vlen))
	call print("\n\r==End==\n\r\x00")
	call hardware_io_port_write(1,1,0)
end

event system_endpoint_watermark_tx(endpoint, size)

    if endpoint = 5 then
        call system_endpoint_set_watermarks(system_endpoint_uart1, $ff, 0) # disable TX watermark
        call system_endpoint_tx(system_endpoint_uart1, out_len, out(0:out_len))
        call attributes_user_write_response(0, 0)
    end if
    
end

event system_endpoint_watermark_rx(endpoint, size)
  if endpoint = system_endpoint_uart1 then
    in_len = size
    call system_endpoint_set_watermarks(system_endpoint_uart1, 0, $ff) # disable RX watermark
    call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) # read data from UART
    call system_endpoint_set_watermarks(system_endpoint_uart1, 10, $ff) # enable RX watermark
    call attributes_write(xgatt_debug, 0, in_len, in(0:in_len)) # Write data to GATT
  end if
end

event connection_disconnected(conn, reas)
  
	connected = 0
	call hardware_io_port_write(1,2,0)
    call print("\n\r==Disconnected==\n\r\x00")
    call print("\n\rReason: 0x\x00")
    call printh(2, reas)
    call print("\n\r\x00")

    call system_endpoint_set_watermarks(system_endpoint_uart1, 0, 0) # disable watermarks
    
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

end
